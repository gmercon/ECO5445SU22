housing.x <- housing.training[-c(1)]
housing.y <- housing.training[c(1)]
housing.x$dist_lakes <- log(housing.x$dist_lakes)
housing.x <- data.matrix(housing.x)
housing.y <- data.matrix(housing.y)
housing.x <- housing.training[-c(1)]
housing.y <- housing.training[c(1)]
housing.x$dist_lakes <- log(housing.x$dist_lakes)
housing.x <- data.matrix(housing.x)
housing.y <- data.matrix(housing.y)
spender <- gamlr(housing.x, log(housing.y), verb=TRUE, family = "gaussian", standardize = TRUE)
summary(spender)
plot(spender, ylim = c(-.05, .15), xlim = c(-6,-1))
housing.x <- housing.training[-c(1)]
housing.y <- housing.training[c(1)]
housing.x$dist_lakes <- log(housing.x$dist_lakes)
housing.x <- data.matrix(housing.x)
housing.y <- data.matrix(housing.y)
spender <- gamlr(housing.x, log(housing.y), verb=TRUE, family = "gaussian", standardize = TRUE)
summary(spender)
plot(spender, ylim = c(-.05, .15), xlim = c(-8,-1))
housing.x <- housing.training[-c(1)]
housing.y <- housing.training[c(1)]
housing.x$dist_lakes <- log(housing.x$dist_lakes)
housing.x <- data.matrix(housing.x)
housing.y <- data.matrix(housing.y)
spender <- gamlr(housing.x, log(housing.y), verb=TRUE, family = "gaussian", standardize = TRUE)
summary(spender)
plot(spender, ylim = c(-.05, .15), xlim = c(-7,-1))
Aicc <- coef(spender)
Aicc
exp(coef(spender))
sum(Aicc!=0)
Aicc[order(Aicc, decreasing = TRUE)]
cv.spender <- ?cv.gamlr(housing.x, log(housing.y),
family="gaussian", verb=TRUE, standardize=TRUE, nfold = 10)
?cv.gamlr
cv.spender <- cv.gamlr(housing.x, log(housing.y),
family="gaussian", verb=TRUE, standardize=TRUE, nfold = 10)
cv.spender <- cv.gamlr(housing.x, log(housing.y),
family="gaussian", standardize=TRUE, nfold = 10)
cv.spender <- cv.gamlr(housing.x, log(housing.y),
family="gaussian", verb=TRUE, standardize=TRUE, nfold = 10)
cv.spender <- cv.gamlr(housing.x, log(housing.y),
family="gaussian", verb=TRUE, standardize=TRUE)
par(mfrow=c(1,2))
plot(cv.spender)
plot(cv.spender$gamlr) ## cv.gamlr has included a gamlr object into cv.nhlreg
par(mfrow=c(1,2))
plot(cv.spender)
plot(cv.spender$gamlr) ## cv.gamlr has included a gamlr object into cv.nhlreg
Aicc <- coef(spender)
Aicc
exp(coef(spender))
sum(Aicc!=0)
Aicc[order(Aicc, decreasing = TRUE)]
View(spender)
View(spender)
Aicc <- coef(spender)
Aicc
exp(coef(spender))
sum(Aicc!=0)
Aicc[order(exp(Aicc), decreasing = TRUE)]
Aicc <- coef(spender)
Aicc
exp(coef(spender))
sum(Aicc!=0)
Aicc[order(Aicc, decreasing = TRUE)]
Aicc <- coef(spender)
Aicc
exp(coef(spender))
sum(Aicc!=0)
Aicc[order(Aicc, decreasing = TRUE)]
Aicc <- coef(spender)
Aicc
exp(coef(spender))
sum(Aicc!=0)
Aicc[order(Aicc, decreasing = TRUE)]
knitr::opts_chunk$set(echo = TRUE)
web <- read.csv("browser-domains.csv")
sitenames <- scan("browser-sites.txt", what="character")
web$site <- factor(web$site, levels=1:length(sitenames), labels=sitenames)
web$id <- factor(web$id, levels=1:length(unique(web$id)))
machinetotals <- as.vector(tapply(web$visits,web$id,sum))
visitpercent <- 100*web$visits/machinetotals[web$id]
xweb <- sparseMatrix(
i=as.numeric(web$id), j=as.numeric(web$site), x=visitpercent,
dims=c(nlevels(web$id),nlevels(web$site)),
dimnames=list(id=levels(web$id), site=levels(web$site)))
head(xweb[1, xweb[1,]!=0])
yspend <- read.csv("browser-totalspend.csv", row.names=1)  # use 1st column as row names
yspend <- as.matrix(yspend) ## good practice to move from dataframe to matrix
spender <- gamlr(xweb, log(yspend), verb=TRUE)
summary(spender)
plot(spender) ## path plot
B <- coef(spender) ## the coefficients selected under AICc
B <- B[-1,] # drop intercept and remove STM formatting
B[which.min(B)] ## low spenders spend a lot of time here
B[which.max(B)] ## big spenders hang out here
coef(spender, select=which.min(BIC(spender))) ## and BIC instead
cv.spender <- cv.gamlr(xweb, log(yspend), verb=TRUE,nfold =10)
beta1se <- coef(cv.spender) ## 1se rule; see ?cv.gamlr
betamin <- coef(cv.spender, select="min") ## min cv selection
cbind(beta1se,betamin)[c("tvguide.com","americanexpress.com"),]
test1 <- predict(spender, housing.validate)
predict(spender, housing.validate)
test1 <- predict(spender, housing.validate)
predict(spender, housing.validate)
newhouse <- data.frame("bed" = 2,
"bath" = 2,
"area_heated"= 1223,
"area" = 9750,
"dist_cbd" = 19368,
"dist_lakes" = 490,
"pool" = 0)
predict(spender, newhouse)
housing.validate <- as.data.frame(housing.validate)
predict(spender, housing.validate, type = "response")
predict(spender, housing.validate)
housing.validate <- as.data.frame(housing.validate)
predict(spender, housing.validate)
test2 <- predict(cv.spender, housing.validate)
predict(newfit2, housing.validate, type = "response")
predict(newfit2, housing.validate)
housing <- read_csv("~/GitHub/ECO5445SU22/Assignment07/data/prop_prices_reduced.csv", col_names = TRUE)
housing$sale_def <- housing$sale_def/1000
housing$dist_lakes <- housing$dist_lakes/mean(housing$dist_lakes)
attach(housing)
set.seed(1234)
Data_subset <- sample(nrow(housing), .9*nrow(housing))
housing.training <- housing[Data_subset,]
housing.validate <- housing[-Data_subset,]
newfit2 <-  lm(log(sale_def) ~ bed + bath + area_heated + area + dist_cbd + log(dist_lakes) + pool, data = housing.training)
summary(newfit2)
predict(newfit2, housing.validate)
Predicted <- predict(newfit2, housing.validate)
Actuals <- housing.validate$sale_def
library(metrics)
install.packages(c("bslib", "htmltools", "interp", "nlme", "pillar", "quantreg", "rlang", "sass", "tibble"))
library(Metrics)
install.packages("Metrics")
library(Metrics)
rmse(Actuals, Predicted)
Predicted <- predict(cv.spender, housing.validate)
View(newfit2)
View(spender)
predict(spender$gamlr, housing.validate)
predict(spender$gamlr, housing.validate, select = "min")
predict.gamlr(spender$gamlr, housing.validate, select = "min")
housing.x <- housing.training[-c(1)]
housing.y <- housing.training[c(1)]
housing.x$dist_lakes <- log(housing.x$dist_lakes)
housing.x <- data.matrix(housing.x)
housing.y <- data.matrix(housing.y)
spender <- gamlr(housing.x, log(housing.y), verb=TRUE, family = "gaussian", standardize = TRUE)
summary(spender)
plot(spender, ylim = c(-.05, .15), xlim = c(-7,-1))
predict.gamlr(spender, housing.validate)
predict(spender$gamlr, housing.validate, select = "min")
LassoP <-  predict(spender, housing.validate, select = "min")
LassoP <- predict(spender, housing.validate, select = "min")
predict(spender, housing.validate, select = "min")
predict(spender, housing.validate, select = "min")
Predicted <- predict(newfit2, housing.validate)
Actuals <- housing.validate$sale_def
rmse(Actuals, Predicted)
predict(spender, housing.validate, select = "min")
predict(spender, housing.validate, select = which.min(AICc(spender))
predict(spender, housing.validate, select = which.min(AICc(spender)))
predict(spender, housing.validate, select=which.min(AICc(spender)))
predict(spender, housing.validate, select=0)
View(housing.x)
View(housing.validate)
predict(spender, housing.validate[-c(1)], select = 0)
rmse(Actuals, LassoPredict)
LassoPredict <- predict(spender, housing.validate[-c(1)], select = 0)
rmse(Actuals, LassoPredict)
View(LassoPredict)
LassoPredict <- as.data.frame(LassoPredict)
LassoPredict <- as.matrix(LassoPredict)
rmse(Actuals, LassoPredict)
rmse(Actuals, Predicted)
rmse(Actuals, LassoPredict)
LassoPredict <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict <- as.matrix(LassoPredict)
rmse(Actuals, LassoPredict)
Predicted <- predict(newfit2, housing.validate)
Actuals <- housing.validate$sale_def
OG.rmse <- rmse(Actuals, Predicted)
LassoPredict <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict <- as.matrix(LassoPredict)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict)
LassoPredict <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict <- as.matrix(LassoPredict)
Lasso.aicrmse <- rmse(Actuals, LassoPredict)
LassoPredict <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict <- as.matrix(LassoPredict)
Lasso.bicrmse <- rmse(Actuals, LassoPredict)
LassoPredict <- predict(cv.spender, housing.validate[-c(1)])
Predicted <- predict(newfit2, housing.validate)
Actuals <- housing.validate$sale_def
OG.rmse <- rmse(Actuals, Predicted)
LassoPredict <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict <- as.matrix(LassoPredict)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict)
LassoPredict <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict <- as.matrix(LassoPredict)
Lasso.aicrmse <- rmse(Actuals, LassoPredict)
LassoPredict <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict <- as.matrix(LassoPredict)
Lasso.bicrmse <- rmse(Actuals, LassoPredict)
LassoPredict <- predict(cv.spender$gamlr, housing.validate[-c(1)])
LassoPredict <- predict(cv.spender$gamlr, housing.validate[-c(1)])
Predicted <- predict(newfit2, housing.validate)
Actuals <- housing.validate$sale_def
OG.rmse <- rmse(Actuals, Predicted)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
LassoPredict4 <- predict(cv.spender$gamlr, housing.validate[-c(1)])
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)])
OG.rmse
Lasso.aiccrmse
Lasso.aicrmse
Lasso.bicrmse
LassoPredict4 <- predict(cv.spender, housing.validate)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select =cv.spender$seg.min)
Predicted <- predict(newfit2, housing.validate)
Actuals <- housing.validate$sale_def
OG.rmse <- rmse(Actuals, Predicted)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select =cv.spender$seg.min)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select = 0)
LassoPredict4 <- as.matrix(LassoPredict4)
CV.rmse <- rmse(Actuals, LassoPredict4)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select = 0)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select =which.min(cv.spender$lambda.min))
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select =which.min(cv.spender))
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="min"))
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="1se")
par(mfrow=c(1,2))
plot(cv.spender)
plot(cv.spender$gamlr) ## cv.gamlr has included a gamlr object into cv.nhlreg
cv.spender <- cv.gamlr(housing.x, log(housing.y),
family="gaussian", verb=TRUE, standardize=TRUE, nfold = 10)
par(mfrow=c(1,2))
plot(cv.spender)
plot(cv.spender$gamlr) ## cv.gamlr has included a gamlr object into cv.nhlreg
Predicted <- predict(newfit2, housing.validate)
Actuals <- housing.validate$sale_def
OG.rmse <- rmse(Actuals, Predicted)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="1se")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.rmse <- rmse(Actuals, LassoPredict4)
Actuals <- log(housing.validate$sale_def)
Predicted <- predict(newfit2, housing.validate)
Actuals <- log(housing.validate$sale_def)
OG.rmse <- rmse(Actuals, Predicted)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.rmse <- rmse(Actuals, LassoPredict4)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="1se")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.rmse <- rmse(Actuals, LassoPredict4)
OG.rmse
Lasso.aiccrmse
Lasso.aicrmse
Lasso.bicrmse
CV.minrmse
Predicted <- predict(newfit2, housing.validate)
Actuals <- log(housing.validate$sale_def)
OG.rmse <- rmse(Actuals, Predicted)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.minrmse <- rmse(Actuals, LassoPredict4)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="1se")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.1sermse <- rmse(Actuals, LassoPredict4)
OG.rmse
Lasso.aiccrmse
Lasso.aicrmse
Lasso.bicrmse
CV.minrmse
CV.1sermse
View(housing.validate)
housing.validate <- housing[-Data_subset,]
housing.training <- housing[Data_subset,]
housing.validate <- housing[-Data_subset,]
housing.validate$dist_lakes <- log(housing.validate$dist_lakes)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.minrmse <- rmse(Actuals, LassoPredict4)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="1se")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.1sermse <- rmse(Actuals, LassoPredict4)
OG.rmse
Lasso.aiccrmse
Lasso.aicrmse
Lasso.bicrmse
CV.minrmse
CV.1sermse
housing <- read_csv("~/GitHub/ECO5445SU22/Assignment07/data/prop_prices_reduced.csv", col_names = TRUE)
housing$sale_def <- housing$sale_def/1000
housing$dist_lakes <- housing$dist_lakes/mean(housing$dist_lakes)
attach(housing)
set.seed(1234)
Data_subset <- sample(nrow(housing), .9*nrow(housing))
housing.training <- housing[Data_subset,]
housing.validate <- housing[-Data_subset,]
Predicted <- predict(newfit2, housing.validate)
Actuals <- log(housing.validate$sale_def)
OG.rmse <- rmse(Actuals, Predicted)
# below we need to log the distance to lakes to fit the gamlr models.
housing.validate$dist_lakes <- log(housing.validate$dist_lakes)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.minrmse <- rmse(Actuals, LassoPredict4)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="1se")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.1sermse <- rmse(Actuals, LassoPredict4)
OG.rmse
Lasso.aiccrmse
Lasso.aicrmse
Lasso.bicrmse
CV.minrmse
CV.1sermse
Predicted <- predict(newfit2, housing.validate)
Actuals <- log(housing.validate$sale_def)
OG.rmse <- rmse(Actuals, Predicted)
# below we need to log the distance to lakes to fit the gamlr models.
housing.validate$dist_lakes <- log(housing.validate$dist_lakes)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.minrmse <- rmse(Actuals, LassoPredict4)
LassoPredict5 <- predict(cv.spender, housing.validate[-c(1)], select ="1se")
LassoPredict5 <- as.matrix(LassoPredict5)
CV.1sermse <- rmse(Actuals, LassoPredict5)
Predicted <- predict(newfit2, housing.validate)
Actuals <- log(housing.validate$sale_def)
OG.rmse <- rmse(Actuals, Predicted)
# below we need to log the distance to lakes to fit the gamlr models.
housing.validate$dist_lakes <- log(housing.validate$dist_lakes)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.minrmse <- rmse(Actuals, LassoPredict4)
LassoPredict5 <- predict(cv.spender, housing.validate[-c(1)], select ="1se")
LassoPredict5 <- as.matrix(LassoPredict5)
CV.1sermse <- rmse(Actuals, LassoPredict5)
#here we undo the distance to lakes in case you need to run the chunk again.
housing.validate <- housing[-Data_subset,]
Predicted <- predict(newfit2, housing.validate)
Actuals <- log(housing.validate$sale_def)
OG.rmse <- rmse(Actuals, Predicted)
# below we need to log the distance to lakes to fit the gamlr models.
housing.validate$dist_lakes <- log(housing.validate$dist_lakes)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
LassoPredict4 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
LassoPredict4 <- as.matrix(LassoPredict4)
CV.minrmse <- rmse(Actuals, LassoPredict4)
LassoPredict5 <- predict(cv.spender, housing.validate[-c(1)], select ="1se")
LassoPredict5 <- as.matrix(LassoPredict5)
CV.1sermse <- rmse(Actuals, LassoPredict5)
#here we undo the distance to lakes in case you need to run the chunk again.
housing.validate <- housing[-Data_subset,]
OG.rmse
Lasso.aiccrmse
Lasso.aicrmse
Lasso.bicrmse
CV.minrmse
CV.1sermse
Predicted <- predict(newfit2, housing.validate)
Actuals <- log(housing.validate$sale_def)
OG.rmse <- rmse(Actuals, Predicted)
# below we need to log the distance to lakes to fit the gamlr models.
housing.validate$dist_lakes <- log(housing.validate$dist_lakes)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
CVPredict1 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
CVPredict1 <- as.matrix(CVPredict1)
CV.minrmse <- rmse(Actuals, CVPredict1)
CVPredict2 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
CVPredict2 <- as.matrix(CVPredict2)
CV.1sermse <- rmse(Actuals, CVPredict2)
#here we undo the distance to lakes in case you need to run the chunk again.
housing.validate <- housing[-Data_subset,]
OG.rmse
Lasso.aiccrmse
Lasso.aicrmse
Lasso.bicrmse
CV.minrmse
CV.1sermse
Predicted <- predict(newfit2, housing.validate)
Actuals <- log(housing.validate$sale_def)
OG.rmse <- rmse(Actuals, Predicted)
# below we need to log the distance to lakes to fit the gamlr models.
housing.validate$dist_lakes <- log(housing.validate$dist_lakes)
LassoPredict1 <- predict(spender, housing.validate[-c(1)], select =which.min(AICc(spender)))
LassoPredict1 <- as.matrix(LassoPredict1)
Lasso.aiccrmse <- rmse(Actuals, LassoPredict1)
LassoPredict2 <- predict(spender, housing.validate[-c(1)], select =which.min(AIC(spender)))
LassoPredict2 <- as.matrix(LassoPredict2)
Lasso.aicrmse <- rmse(Actuals, LassoPredict2)
LassoPredict3 <- predict(spender, housing.validate[-c(1)], select =which.min(BIC(spender)))
LassoPredict3 <- as.matrix(LassoPredict3)
Lasso.bicrmse <- rmse(Actuals, LassoPredict3)
CVPredict1 <- predict(cv.spender, housing.validate[-c(1)], select ="min")
CVPredict1 <- as.matrix(CVPredict1)
CV.minrmse <- rmse(Actuals, CVPredict1)
CVPredict2 <- predict(cv.spender, housing.validate[-c(1)], select ="1se")
CVPredict2 <- as.matrix(CVPredict2)
CV.1sermse <- rmse(Actuals, CVPredict2)
#here we undo the distance to lakes in case you need to run the chunk again.
housing.validate <- housing[-Data_subset,]
OG.rmse
Lasso.aiccrmse
Lasso.aicrmse
Lasso.bicrmse
CV.minrmse
CV.1sermse
